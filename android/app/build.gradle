try {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile rootProject.file(keystoreProperties['storeFile'] ?: 'keystore.keystore')
                storePassword keystoreProperties['storePassword']
            }
        }
    } catch(ignored) {
        println("'storeFile' not found, app will not be signed")
    }

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.google.firebase.crashlytics'



def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    println "VersionCode is set to $code"
    return code
}

android {

    compileSdkVersion 31
    buildToolsVersion '28.0.3'
    flavorDimensions "default"

    defaultConfig {
        applicationId "is.stokkur.afladagbok.android"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode getVersionCode()
        versionName '1.4.6'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = false
        multiDexEnabled true

        ndkVersion "21.4.7075529"

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

//        ndk {
//            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//        }
    }

    sourceSets {
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }

    buildTypes {
        release {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    productFlavors {
        def BASE_ENDPOINT = "BASE_ENDPOINT"
        def SHOW_LOG = "SHOW_LOG"

        dev {
            applicationId "is.stokkur.afladagbok.android.dev"
            buildConfigField "String", BASE_ENDPOINT, '"<dev_endpoint>"'
            buildConfigField "boolean", SHOW_LOG, "true"
            resValue "string", "app_name", "Afladagbók Dev"
        }

        stage {
            applicationId "is.stokkur.afladagbok.android.test"
            buildConfigField "String", BASE_ENDPOINT, '"<stage_endpoint>"'
            buildConfigField "boolean", SHOW_LOG, "true"
            resValue "string", "app_name", "Afladagbók Test"
        }

        prod {
            applicationId "is.stokkur.afladagbok.android"
            buildConfigField "String", BASE_ENDPOINT, '"<prod_endpoint>"'
            buildConfigField "boolean", SHOW_LOG, "false"
            resValue "string", "app_name", "Afladagbók"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

def support_version = "26.1.0"
def arch_version = "1.1.0"
def espresso_version = "2.2.2"
def findbugs_version = "3.0.1"
def retrofit2_version = "2.3.0"
def ok_http3_version = "3.6.0"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "com.google.code.findbugs:jsr305:${findbugs_version}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'


    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.browser:browser:1.2.0"


    // Required -- JUnit 4 framework
    androidTestImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    androidTestImplementation 'org.mockito:mockito-core:2.7.6'

    // Arch
    implementation 'androidx.lifecycle:lifecycle-runtime:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.0.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    // Room (use 1.1.0-alpha1 for latest alpha)
    implementation 'androidx.room:room-runtime:2.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.0.0'

    // Paging
    implementation 'androidx.paging:paging-runtime:2.0.0'

    // Test helpers for LiveData
    testImplementation 'androidx.arch.core:core-testing:2.0.0'

    // Test helpers for Room
    testImplementation 'androidx.room:room-testing:2.0.0'

    // mapbox
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:5.5.0'

    //Calligraphy
    implementation 'io.github.inflationx:calligraphy3:3.1.1'


    //Butterknife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    //Recyclerview
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    // Dependency injection
    implementation "com.google.dagger:dagger:2.27"
    implementation "com.google.dagger:dagger-android:2.35.1"
    implementation "com.google.dagger:dagger-android-support:2.11"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation "com.google.firebase:firebase-auth"
    implementation "com.google.firebase:firebase-core"
    implementation "com.google.firebase:firebase-messaging"
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'

    // Import the BoM for the Firebase platform

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies




    // Play Services
    implementation "com.google.android.gms:play-services-base:15.0.1"
    implementation "com.google.android.gms:play-services-gcm:15.0.1"
    implementation "com.google.android.gms:play-services-location:15.0.1"

    //Retrofit`
    implementation "com.squareup.okhttp3:logging-interceptor:${ok_http3_version}"
    implementation "com.squareup.okhttp3:okhttp:${ok_http3_version}"
    implementation "com.squareup.retrofit2:retrofit:${retrofit2_version}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit2_version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit2_version}"

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'

    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
}

play {
    jsonFile = file("/opt/keys/afladagbokin_key.json")
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 Stokkur Software ehf.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// if (new File("/opt/signing/afladagbokin.gradle").exists()) {
//     apply from: "/opt/signing/afladagbokin.gradle"
// } else {
//     println "+--------------------------------------------------------------------+"
//     println "No gradle file found at /opt/signing/afladagbokin.gradle"
//     println "+--------------------------------------------------------------------+"
// }

apply plugin: 'com.google.gms.google-services'

